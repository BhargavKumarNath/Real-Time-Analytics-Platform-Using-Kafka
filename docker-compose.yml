version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - broker-network

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - broker-network

  kafka-topic-creator:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-topic-creator
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - broker-network
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        cub kafka-ready -b kafka:9092 1 20 &&
        echo 'Kafka is ready!' &&
        kafka-topics --create --topic stock_prices --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1
      "
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.3
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - broker-network

  postgres:
      image: timescale/timescaledb:latest-pg14
      container_name: postgres
      ports:
        - "5432:5432"
      environment:
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=stock_data
      volumes:
        - pgdata:/var/lib/postgresql/data
      networks:
        - broker-network

  minio:
    image: minio/minio:RELEASE.2023-09-07T02-05-02Z
    container_name: minio
    ports:
      - "9000:9000" # API Port
      - "9001:9001" # Web UI Port
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - miniodata:/data
    command: server /data --console-address ":9001"
    networks:
      - broker-network

  create-minio-bucket:
    image: minio/mc
    depends_on:
      - minio
    container_name: create-minio-bucket
    entrypoint: >
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 minioadmin minioadmin; do
        echo '...waiting...' && sleep 1;
      done;
      mc mb myminio/stock-data-lake;
      mc policy set public myminio/stock-data-lake;
      echo 'Bucket created successfully';
      "

    networks:
      - broker-network
    
  producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    container_name: producer
    depends_on:
      kafka:
        condition: service_healthy # <-- This is the key change
      schema-registry:
        condition: service_started
    networks:
      - broker-network
    volumes:
      - ./producer/src:/app/producer/src
      - ./config:/app/config
  
  processor:
    build: 
      context: .
      dockerfile: processor/Dockerfile
    container_name: processor
    depends_on:
      - kafka
      - schema-registry
    networks:
      - broker-network
    volumes:
      - ./processor/src:/app/src

volumes:
  pgdata:
  miniodata:

networks:
  broker-network:
    driver: bridge

